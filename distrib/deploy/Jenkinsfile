def DEPLOY_GIT_SCOPE
def DEPLOY_NAMESPACE
def WEB_SERVER_HOST
def API_HOST
def REGISTRY_HOST

def generateExtHttp(namespace, name, host) {
    sh "jinja2 -D namespace=${namespace} -D name=$name -D host=$host distrib/templates/ext-http/service-entry.yaml > distrib/${name}-service-entry.yaml"
    sh "jinja2 -D namespace=${namespace} -D name=$name -D host=$host distrib/templates/ext-http/virtual-service.yaml > distrib/${name}-virtual-service.yaml"
    sh "jinja2 -D namespace=${namespace} -D name=$name -D host=$host distrib/templates/ext-http/destination-rule.yaml > distrib/${name}-destination-rule.yaml"
    sh "jinja2 -D namespace=${namespace} -D name=$name -D host=$host distrib/templates/ext-http/service.yaml > distrib/${name}-service.yaml"

    return "-f distrib/${name}-service.yaml " +
            "-f distrib/${name}-service-entry.yaml " +
            "-f distrib/${name}-virtual-service.yaml " +
            "-f distrib/${name}-destination-rule.yaml "
}

def generateImageTag(container) {
    def scope = sh(encoding: 'UTF-8', returnStdout: true, script: 'git name-rev --name-only HEAD')
            .trim()
            .tokenize('/')
            .last()
            .toLowerCase()

    return 'pro.ra-tech/garden-manager/' + scope + '/' + container + ':latest'
}

pipeline {
    agent { label 'jenkins-agent1' }

    parameters {
        string(name: 'web_server_image', description: 'Web server with static image tag')
    }

    stages {
        stage('Determine git scope') {
            steps {
                script {
                    DEPLOY_GIT_SCOPE = BRANCH_NAME.tokenize('/').last().toLowerCase()
                    echo "Git branch scope: '${DEPLOY_GIT_SCOPE}'"
                }
            }
        }

        stage('Determine stand specific params') {
            steps {
                script {
                    if (BRANCH_NAME.startsWith('release/')) {
                        DEPLOY_NAMESPACE = 'garden-manager-app'
                        WEB_SERVER_HOST = 'garden-manager.cloud.ra-tech.pro'
                        API_HOST = 'api.garden-manager.cloud.ra-tech.pro'
                        REGISTRY_HOST = DOCKER_REGISTRY_HOST
                    } else {
                        DEPLOY_NAMESPACE = 'garden-manager-app-test'
                        WEB_SERVER_HOST = 'garden-manager.test.cloud.ra-tech.pro'
                        API_HOST = 'api.garden-manager.test.cloud.ra-tech.pro'
                        REGISTRY_HOST = SNAPSHOTS_DOCKER_REGISTRY_HOST
                    }

                    println "Namespace to deploy web server: $DEPLOY_NAMESPACE"
                    println "Web server host: $WEB_SERVER_HOST"
                }
            }
        }

        stage('Cleanup k8s namespace') {
            steps {
                script {
                    def namespace = DEPLOY_NAMESPACE
                    withKubeConfig([credentialsId: 'jenkins-k8s-cert', serverUrl: KUBERNETES_API_URL, namespace: namespace]) {
                        sh 'kubectl version'

                        println 'Deleting web static deployment and pods'
                        sh "kubectl delete deployment -l app.kubernetes.io/component=web-static -n $namespace"
                        sh "kubectl wait --for=delete pod -l app=garden-manager-app --timeout 5m -n $namespace"

                        println 'Deleting other web static manifests'
                        sh "kubectl delete service -l app.kubernetes.io/component=web-static -n $namespace"
                        sh "kubectl delete virtualservice -l app.kubernetes.io/component=web-static -n $namespace"
                        sh "kubectl delete destinationrule -l app.kubernetes.io/component=web-static -n $namespace"
                        sh "kubectl delete gateway -l app.kubernetes.io/component=web-static -n $namespace"
                        sh "kubectl delete networkpolicy -l app.kubernetes.io/component=web-static -n $namespace"
                        sh "kubectl delete serviceentry -l app.kubernetes.io/component=web-static -n $namespace"

                        println 'Cleanup finished'
                    }
                }
            }
        }

        stage('Deploy to k8s') {
            steps {
                script {
                    def namespace = DEPLOY_NAMESPACE
                    def host = WEB_SERVER_HOST
                    def apiHost = API_HOST
                    def imageTag = params.web_server_image
                            ? params.web_server_image
                            : generateImageTag('garden-manager-app')
                    def apiApply

                    withPythonEnv('Python-3') {
                        sh 'pip install -U jinja2-cli'

                        // web static
                        sh "jinja2 -D namespace=$namespace -D registry=$REGISTRY_HOST -D image_tag=$imageTag distrib/templates/deployment.yaml > distrib/deployment.yaml"
                        sh "jinja2 -D namespace=$namespace distrib/templates/service.yaml > distrib/service.yaml"
                        sh "jinja2 -D namespace=$namespace distrib/templates/network-policy.yaml > distrib/network-policy.yaml"
                        sh "jinja2 -D namespace=$namespace -D host=$host distrib/templates/ingress-gateway.yaml > distrib/ingress-gateway.yaml"
                        sh "jinja2 -D namespace=$namespace -D api_host=$API_HOST distrib/templates/egress-gateway.yaml > distrib/egress-gateway.yaml"
                        sh "jinja2 -D namespace=$namespace distrib/templates/destination-rule.yaml > distrib/destination-rule.yaml"
                        sh "jinja2 -D namespace=$namespace -D host=$host distrib/templates/virtual-service.yaml > distrib/virtual-service.yaml"
                        sh "jinja2 -D namespace=$namespace distrib/templates/egw-destination-rule.yaml > distrib/egw-destination-rule.yaml"

                        // API
                        apiApply = generateExtHttp(namespace, 'api', apiHost)
                    }

                    withKubeConfig([credentialsId: 'jenkins-k8s-cert', serverUrl: KUBERNETES_API_URL, namespace: namespace]) {
                        println 'Applying web static manifests'
                        sh 'kubectl apply ' +
                                '-f distrib/network-policy.yaml ' +
                                '-f distrib/service.yaml ' +
                                '-f distrib/ingress-gateway.yaml ' +
                                '-f distrib/egress-gateway.yaml ' +
                                '-f distrib/virtual-service.yaml ' +
                                '-f distrib/destination-rule.yaml ' +
                                '-f distrib/egw-destination-rule.yaml ' +
                                apiApply

                        println 'Deploying web static'
                        sh 'kubectl apply -f distrib/deployment.yaml'

                        println 'Deployment finished'
                    }
                }
            }
        }
    }
}